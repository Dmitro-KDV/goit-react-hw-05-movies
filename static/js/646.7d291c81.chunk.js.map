{"version":3,"file":"static/js/646.7d291c81.chunk.js","mappings":"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","sources":["components/pages/Cast.jsx","components/pages/Reviews.jsx","components/pages/MovieDetails.jsx"],"sourcesContent":["import React from 'react'\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport {getMoviesCast} from '../services'\n\nconst url_details = 'https://image.tmdb.org/t/p/w200';\n\nexport function Cast({movieId}) {\n  const [moviesCast, setMoviesCast] = useState(null);\n\n    useEffect(() => {\n        getMoviesCast(movieId)\n        .then(response => {\n          if (response.data === 0) {\n              Notiflix.Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n              return;\n          }\n          setMoviesCast(response.data.cast);\n        })\n        .catch(function (error) {\n          Notiflix.Notify.failure(\n            'Oops! Something went wrong! Try reloading the page!'\n          );\n        })\n    }, [movieId]);\n\n\n    return (\n      <div>\n        {moviesCast && moviesCast.map((el) => {\n          return (\n          <ul key={el.id}>\n            <img src={`${url_details}${el.profile_path}`} alt={el.name}/>\n            <p>{el.name}</p>\n            <p>Character: {el.character}</p>\n          </ul>\n        )})}\n      </div>\n    );\n}\n\n","import React from 'react'\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport {getMoviesReviews} from '../services'\n\nexport function Reviews({movieId}) {\n  const [moviesReviews, setMoviesReviews] = useState(null);\n\n    useEffect(() => {\n        getMoviesReviews(movieId)\n        .then(response => {\n          if (response.data === 0) {\n              Notiflix.Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n              return;\n          }\n          setMoviesReviews(response.data.results);\n        })\n        .catch(function (error) {\n          Notiflix.Notify.failure(\n            'Oops! Something went wrong! Try reloading the page!'\n          );\n        })\n    }, [movieId]);\n\n\n    return (\n      <div>\n        {moviesReviews && moviesReviews.map((el) => {\n          return (\n          <ul key={el.id}>\n            <h3>Author: {el.author}</h3>\n            <p>Character: {el.content}</p>\n          </ul>\n        )})}\n      </div>\n    );\n}\n\n","// import React, { Suspense } from 'react'\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport {getMoviesDetails} from '../services';\nimport {Cast} from './Cast';\nimport {Reviews} from './Reviews';\nimport {Inform, Goback} from '../stiled';\n\nconst url_details = 'https://image.tmdb.org/t/p/w300';\n\nfunction MovieDetails() {\n    const { movieId } = useParams();\n    const [moviesDetails, setMoviesDetails] = useState(null);\n    const [cast, setCast] = useState(false);\n    const [reviews, setReviews] = useState(false);\n    const location = useLocation()\n\n    useEffect(() => {\n        getMoviesDetails(movieId)\n        .then(response => {\n          if (response.data === 0) {\n              Notiflix.Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n              return;\n          }\n          setMoviesDetails(response.data);\n        })\n        .catch(function (error) {\n          Notiflix.Notify.failure(\n            'Oops! Something went wrong! Try reloading the page!'\n          );\n        })\n    }, [movieId]);\n\n    const openCast = () => {\n      setCast(true)\n      setReviews(false)\n    }\n\n    const openReviews = () => {\n      setReviews(true)\n      setCast(false)\n    }\n\n\n    let genress = '';\n    let today\n    if (moviesDetails) {\n        // const {poster_path, original_title, release_date, overview, genres, vote_average} = moviesDetails;\n        moviesDetails.genres.map((el) => {\n                return genress += `${el.name}  `\n              })\n        today = new Date(moviesDetails.release_date)\n    }\n    return (\n      <div>\n        {moviesDetails && \n        <div>\n          <div>\n            <Link to={location.state}>\n              <Goback type=\"button\">Go back</Goback>\n            </Link>\n          </div>\n          <div>\n            <img src={`${url_details}${moviesDetails.poster_path}`} alt={moviesDetails.original_title}/>\n            <h2>{`${moviesDetails.original_title} (${today.getFullYear()})`}</h2>\n            <p>User Score: {`${Math.round(moviesDetails.vote_average*10)} %`}</p>\n            <h3>Overview</h3>\n            <p>{moviesDetails.overview}</p>\n            <h4>Genres</h4>\n            <p>{genress}</p>\n          </div>\n          <div>\n            <h5>Additional information</h5>\n            <ul>\n              <Inform onClick={openCast}>Cast\n              </Inform>\n            </ul>\n            <ul>\n              <Inform onClick={openReviews}>Reviews\n              </Inform>\n            </ul>\n              {cast && <Cast movieId={movieId}/>}\n              {reviews && <Reviews movieId={movieId}/>}\n          </div>\n        </div>}\n      </div>\n    );\n}\n\nexport default MovieDetails\n"],"names":["Cast","_ref","movieId","_useState","useState","_useState2","_slicedToArray","moviesCast","setMoviesCast","useEffect","getMoviesCast","then","response","data","cast","Notiflix","catch","error","_jsx","children","map","el","_jsxs","src","concat","profile_path","alt","name","character","id","Reviews","moviesReviews","setMoviesReviews","getMoviesReviews","results","author","content","useParams","moviesDetails","setMoviesDetails","_useState3","_useState4","setCast","_useState5","_useState6","reviews","setReviews","location","useLocation","getMoviesDetails","today","genress","genres","Date","release_date","Link","to","state","Goback","type","poster_path","original_title","getFullYear","Math","round","vote_average","overview","Inform","onClick"],"sourceRoot":""}